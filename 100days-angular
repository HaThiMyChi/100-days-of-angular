npm install -g @angular/cli@latest

check version angular -> ng version

Nếu các bạn không thể chạy ng version vì nó báo 'ng' is not recognized as an internal or external command. thì các bạn cần phải thêm npm global vào PATH.

Thì các bạn cần phải enable policy để chạy được command. Để enable các bạn mở Powershell as Administrator và chạy lệnh này Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine hoặc mở link ở thông báo lỗi để tìm hiểu thêm.

khởi tạo dự án -> ng new <tên-project>

ng serve Mặc định dự án sẽ chạy ở port 4200, nếu bạn muốn đổi port thì chỉ cần thêm tham số

ng serve --port=other-port Ví dụ: ng serve --port=9000

Đối với AppComponent, đây là root component của ứng dụng, bạn có thể lại thấy một TS decorator khác nữa tên là Component, và bên dưới là một TS class thông thường. Ở trong ứng dụng Angular, TS decorator mà Angular cung cấp thông thường sẽ để gắn thêm meta-data cho class/property/method, đối với class AppComponent, decorator Component sẽ gắn thêm một số meta-data như selector, template (view của component, chính là chúng ta sẽ định nghĩa component sẽ hiển thị những gì), etc View của một component có thể coi là phần HTML mở rộng, nó có nhiều tính năng hơn HTML thông thường. Ở trong view chúng ta có thể sẽ nhúng các component/directive khác. Vậy là đã rõ, tag app-root mà chúng ta nhìn thấy từ index.html sau một vòng tìm hiểu chúng ta sẽ tìm ra nó thuộc về AppComponent.

=== Data binding======
DOM là gì? Khi browser load trang web của bạn, nó sẽ parse phần HTML và xây dựng nên một cây Document Object Model (DOM) từ đó để biểu diễn tương ứng những gì HTML đang được dựng, cho phép chúng ta có thể tương tác với phần HTML như đọc, sửa HTML bằng JavaScript. Giả sử khi bạn có phần HTML: Sau khi parse xong sẽ có một object (node) thuộc type HTMLInputElement được tạo ra. Ở đây type=”text” hay value=”something” là các HTML attribute. Mỗi tag HTML có thể có nhiều attribute khác nữa (xin mời bạn Search Google). Object được tạo tương ứng sẽ có dạng

obj = {
  type: 'text',
  value: 'something',
  attributes: [], // thuộc type NamedNodeMap, dạng như một array
  // … các thuộc tính, method khác
};

EVENT BINDING
Ví dụ, khi người dùng click vào button, tôi muốn hiển thị alert cho người dùng nhìn thấy -> sử dụng event binding
Để gắn event listener vào một phần tử nào đó ở trên template.
@Component({
  selector: 'app-hello',
  template: `
    <h2>Hello there!</h2>
    <button (click)="showInfo()">Click me!</button>
  `,
})
export class HelloComponent {
  showInfo() {
    alert('Inside Angular Component method');
  }
}

====== TWO-WAY BINDING =======
Trong thực tế two-way binding chính là kết hợp của binding dữ liệu từ class ra template thông qua property binding, và từ template vào class thông qua event binding. Nó chứa cú pháp ngắn gọn dạng vuông vuông tròn tròn như sau:

<input type="text" [(ngModel)]="user.name" />
Để sử dụng ngModel bạn cần imports FormsModule, nhưng trong bài này chúng ta chỉ cần hiểu, nó là cách viết tắt của dạng tương ứng là:

<input type="text" [ngModel]="user.name" (ngModelChange)="user.name = $event" />

===== Structure Directive-If-ELse=======
<div *ngIf="user.age >= 13; else noPG13">Bạn có thể xem nội dung PG-13</div>
<ng-template #noPG13>
  <div>Bạn không thể xem nội dung PG-13</div>
</ng-template>

MỘT SỐ LOCAL VARIABLE TRONG MỘT NGFOROF TEMPLATE
Khi sử dụng NgForOf, ở mỗi vòng lặp chúng ta sẽ có thể truy xuất đến một số local variable như:

Term	Description
$implicit: T	Giá trị của phần tử trong danh sách ở lần lặp hiện tại
index: number	index của lần lặp hiện tại
count: number	số lượng phần tử trong danh sách
first: boolean	True nếu đây là phần tử đầu tiên trong danh sách
last: boolean	True nếu đây là phần tử cuối cùng trong danh sách
even: boolean	True nếu đây là phần tử ở index chẵn
odd: boolean	True nếu đây là phần tử ở index lẻ
Để truy xuất được những biến trên chúng ta chỉ cần gọi chúng như sau: Đối với $implicit nó sẽ được gắn cho biến mà chính chúng ta khi khai báo let something of xxx, lúc này something = \$implicit. Đối với các biến khác, chúng ta chỉ cần dùng cú pháp sau:

<div *ngFor="let author of authors; index as idx; count as total">
  ({{idx}})/({{total}}): {{author.id}} - {{author.firstName}}
  {{author.lastName}}
</div>
Lúc này biến idx = index, và total = count. Tương tự đối với các biến còn lại.


======Day 6: ATTRIBUTE DIRECTIVE==========
Attribute directive là gì, nó có khác gì Structure directive mà chúng ta đã gặp qua như NgIf, NgForOf không? Đối với Structure directive, nó có thể thêm, xóa, thay đổi cấu trúc cây DOM. Còn một Attribute directive sẽ có thể thay đổi cách hiển thị (style) hoặc hành vi của một DOM element/Component/Directive khác. Đấy chính là sự khác biệt giữa chúng.

CLASS BINDING ví dụ  <div [class.tab-active]="isTabActive">some content</div>
STYLE BINDING ví dụ <div [style.width]="”someValue”"></div>

==== Day 7: COMPONENT INTERACTION - PASS DATA FROM PARENT TO CHILD WITH INPUT BINDING =========
thì sử dụng @INPUT DECORATOR ví dụ như này
export class ProgressBarComponent implements OnInit {
  @Input() backgroundColor: string;
  @Input() progressColor: string;
  @Input() progress = 0;
  constructor() {}
  ngOnInit() {}
}

Constructor là hàm tạo của một class, nó là một function đặc biệt mà khi bạn khởi tạo một instance của class thì nó sẽ được tự động chạy, và chỉ chạy duy nhất một lần. ngOninit là một life-cycle method, nó sẽ được Angular tự động gọi khi component được khởi tạo, sau khi constructor chạy và sau khi các input đã được binding. Do đó nếu bạn binding cho một property ở template của component cha, thì ở constructor của component con bạn sẽ chưa nhận được giá trị mà bạn đã binding, nhưng ở ngOnInit thì bạn sẽ có thể nhận được.

ngOnChanges sẽ chạy lại mỗi khi có một input nào bị thay đổi, nó sẽ được tự động gọi bởi Angular, do đó chúng ta có thể validate property progress như sau:

ngOnDestroy() rất hữu ích để dọn dẹp và giải phóng tài nguyên khi component hoặc directive không còn cần thiết nữa, giúp tránh rò rỉ bộ nhớ và đảm bảo hiệu suất của ứng dụng.

async và await là các từ khóa trong JavaScript/TypeScript được sử dụng để làm việc với các Promise một cách dễ dàng và rõ ràng hơn. Trong Angular, chúng thường được sử dụng để xử lý các tác vụ bất đồng bộ như gọi API, đọc/ghi dữ liệu, hoặc thực hiện các thao tác không đồng bộ khác.

Khai báo hàm bất đồng bộ với async:

Khi bạn khai báo một hàm với từ khóa async, hàm đó sẽ luôn trả về một Promise. Bên trong hàm async, bạn có thể sử dụng từ khóa await để đợi kết quả của một Promise khác.
Sử dụng await để đợi kết quả của Promise:

Từ khóa await chỉ có thể được sử dụng bên trong một hàm async. Nó sẽ tạm dừng việc thực thi của hàm cho đến khi Promise được giải quyết (resolve) hoặc bị từ chối (reject).

map: Biến đổi từng phần tử của mảng và trả về một mảng mới với cùng số lượng phần tử.
filter: Lọc các phần tử của mảng dựa trên điều kiện và trả về một mảng mới chỉ chứa các phần tử thỏa mãn điều kiện đó.